{
  "address": "0xF0A3Dc4ea4ef8A18B2efCCA8c6035C1f50505DE6",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Borrowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Lended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isWhitelisted",
          "type": "bool"
        }
      ],
      "name": "WhitelistUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "borrowFaucet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isWhitelistedAccount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastBorrowedTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lendFaucet",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lenders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isWhitelisted",
          "type": "bool"
        }
      ],
      "name": "updateWhitelistedAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x13afff7735d1393e5ea4efe0655f1f726a50f421228b2347ed62a2424ce0f3a7",
  "receipt": {
    "to": null,
    "from": "0x4a32670436a8A662E75E64B91B3Ab989B8a00064",
    "contractAddress": "0xF0A3Dc4ea4ef8A18B2efCCA8c6035C1f50505DE6",
    "transactionIndex": 4,
    "gasUsed": "1248172",
    "logsBloom": "0x
    "blockHash": "0xededab6f5a225108a8625f9eb239d6b3331a92ff0e3f05957eb5157c2eb6c796",
    "transactionHash": "0x13afff7735d1393e5ea4efe0655f1f726a50f421228b2347ed62a2424ce0f3a7",
    "logs": [],
    "blockNumber": 7547167,
    "cumulativeGasUsed": "1387578",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "166556d441e31227d6550eef5df3f0bf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Borrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Lended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"WhitelistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"borrowFaucet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelistedAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastBorrowedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendFaucet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lenders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"updateWhitelistedAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner. Setting `newOwner` to the zero address is allowed; this can be used to cancel an initiated ownership transfer.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"borrowFaucet(address)\":{\"notice\":\"Allows whitelisted users to borrow Ether from the contract\"},\"initialize()\":{\"notice\":\"Initializer function (replaces constructor)\"},\"lendFaucet()\":{\"notice\":\"Allows lenders to deposit Ether into the treasury\"},\"updateWhitelistedAccount(address,bool)\":{\"notice\":\"Updates the whitelist status of an account\"},\"withdraw(uint256)\":{\"notice\":\"Allows the owner to withdraw Ether from the treasury\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SyvoraTreasury.sol\":\"SyvoraTreasury\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {OwnableUpgradeable} from \\\"./OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This extension of the {Ownable} contract includes a two-step mechanism to transfer\\n * ownership, where the new owner must call {acceptOwnership} in order to replace the\\n * old one. This can help prevent common mistakes, such as transfers of ownership to\\n * incorrect accounts, or to contracts that are unable to interact with the\\n * permission system.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable2Step\\n    struct Ownable2StepStorage {\\n        address _pendingOwner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable2Step\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant Ownable2StepStorageLocation = 0x237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00;\\n\\n    function _getOwnable2StepStorage() private pure returns (Ownable2StepStorage storage $) {\\n        assembly {\\n            $.slot := Ownable2StepStorageLocation\\n        }\\n    }\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    function __Ownable2Step_init() internal onlyInitializing {\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        return $._pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     *\\n     * Setting `newOwner` to the zero address is allowed; this can be used to cancel an initiated ownership transfer.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        $._pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        delete $._pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0xe9570c90b688339474e80090b0cdf0b2c85c25aa28cc6044d489dda9efc2c716\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"contracts/SyvoraTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.25;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {Ownable2StepUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\n\\ncontract SyvoraTreasury is Initializable, Ownable2StepUpgradeable {\\n    mapping(address => uint256) public lenders;\\n    mapping(address => uint256) public borrowers;\\n    mapping(address => bool) public isWhitelistedAccount;\\n    mapping(address => uint256) public lastBorrowedTimestamp;\\n\\n    event WhitelistUpdated(address indexed account, bool isWhitelisted);\\n    event Borrowed(address indexed borrower, uint256 amount);\\n    event Lended(address indexed lender, uint256 amount);\\n    event Withdrawn(address indexed owner, uint256 amount);\\n\\n    /// @notice Initializer function (replaces constructor)\\n    function initialize() external initializer {\\n        __Ownable2Step_init();\\n    }\\n\\n    /// @notice Allows whitelisted users to borrow Ether from the contract\\n    function borrowFaucet(address account) external {\\n        uint256 amount = 0.2 ether;\\n        require(account.balance < 0.5 ether, \\\"Already having sufficient funds\\\");\\n        require(isWhitelistedAccount[account], \\\"Not a whitelisted account\\\");\\n        require(address(this).balance >= amount, \\\"Insufficient balance\\\");\\n        require(\\n            block.timestamp >= lastBorrowedTimestamp[account] + 8 hours,\\n            \\\"Wait 8 hours before borrowing again\\\"\\n        );\\n\\n        (bool isSuccess, ) = account.call{value: amount}(\\\"\\\");\\n        require(isSuccess, \\\"Transfer failed\\\");\\n\\n        borrowers[account] += amount;\\n        lastBorrowedTimestamp[account] = block.timestamp;\\n        emit Borrowed(account, amount);\\n    }\\n\\n    /// @notice Updates the whitelist status of an account\\n    function updateWhitelistedAccount(\\n        address account,\\n        bool isWhitelisted\\n    ) external onlyOwner {\\n        isWhitelistedAccount[account] = isWhitelisted;\\n        emit WhitelistUpdated(account, isWhitelisted);\\n    }\\n\\n    /// @notice Allows the contract to receive Ether\\n    receive() external payable {}\\n\\n    /// @notice Allows lenders to deposit Ether into the treasury\\n    function lendFaucet() external payable {\\n        require(msg.value > 0, \\\"Incorrect Ether sent\\\");\\n        lenders[msg.sender] += msg.value;\\n        emit Lended(msg.sender, msg.value);\\n    }\\n\\n    /// @notice Allows the owner to withdraw Ether from the treasury\\n    function withdraw(uint256 amount) external onlyOwner {\\n        require(address(this).balance >= amount, \\\"Insufficient balance\\\");\\n\\n        (bool isSuccess, ) = msg.sender.call{value: amount}(\\\"\\\");\\n        require(isSuccess, \\\"Transfer failed\\\");\\n\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x8d4f9e178ec7ab31036087fc52a97939f102117054970afd2bbf2fe1ff811da8\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b506115b88061001f6000396000f3fe6080604052600436106100e15760003560e01c80638129fc1c1161007f578063c01cd1c711610059578063c01cd1c7146102a3578063e30c3978146102cc578063f0d5b1d0146102f7578063f2fde38b14610301576100e8565b80638129fc1c146102245780638da5cb5b1461023b578063bf5d50c414610266576100e8565b806354789a5e116100bb57806354789a5e1461019057806367b4982c146101cd578063715018a6146101f657806379ba50971461020d576100e8565b806322e4a528146100ed57806328fd10d71461012a5780632e1a7d4d14610167576100e8565b366100e857005b600080fd5b3480156100f957600080fd5b50610114600480360381019061010f9190611020565b61032a565b6040516101219190611066565b60405180910390f35b34801561013657600080fd5b50610151600480360381019061014c9190611020565b610342565b60405161015e9190611066565b60405180910390f35b34801561017357600080fd5b5061018e600480360381019061018991906110ad565b61035a565b005b34801561019c57600080fd5b506101b760048036038101906101b29190611020565b6104a3565b6040516101c491906110f5565b60405180910390f35b3480156101d957600080fd5b506101f460048036038101906101ef9190611020565b6104c3565b005b34801561020257600080fd5b5061020b610828565b005b34801561021957600080fd5b5061022261083c565b005b34801561023057600080fd5b506102396108cb565b005b34801561024757600080fd5b50610250610a58565b60405161025d919061111f565b60405180910390f35b34801561027257600080fd5b5061028d60048036038101906102889190611020565b610a90565b60405161029a9190611066565b60405180910390f35b3480156102af57600080fd5b506102ca60048036038101906102c59190611166565b610aa8565b005b3480156102d857600080fd5b506102e1610b59565b6040516102ee919061111f565b60405180910390f35b6102ff610b91565b005b34801561030d57600080fd5b5061032860048036038101906103239190611020565b610c79565b005b60036020528060005260406000206000915090505481565b60006020528060005260406000206000915090505481565b610362610d35565b804710156103a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039c90611203565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff16826040516103cb90611254565b60006040518083038185875af1925050503d8060008114610408576040519150601f19603f3d011682016040523d82523d6000602084013e61040d565b606091505b5050905080610451576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610448906112b5565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5836040516104979190611066565b60405180910390a25050565b60026020528060005260406000206000915054906101000a900460ff1681565b60006702c68af0bb14000090506706f05b59d3b200008273ffffffffffffffffffffffffffffffffffffffff163110610531576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052890611321565b60405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166105bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b49061138d565b60405180910390fd5b80471015610600576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f790611203565b60405180910390fd5b617080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461064d91906113dc565b42101561068f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068690611482565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16826040516106b590611254565b60006040518083038185875af1925050503d80600081146106f2576040519150601f19603f3d011682016040523d82523d6000602084013e6106f7565b606091505b505090508061073b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610732906112b5565b60405180910390fd5b81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461078a91906113dc565b9250508190555042600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167fac59582e5396aca512fa873a2047e7f4c80f8f55d4a06cb34a78a0187f62719f8360405161081b9190611066565b60405180910390a2505050565b610830610d35565b61083a6000610dbc565b565b6000610846610dfc565b90508073ffffffffffffffffffffffffffffffffffffffff16610867610b59565b73ffffffffffffffffffffffffffffffffffffffff16146108bf57806040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016108b6919061111f565b60405180910390fd5b6108c881610dbc565b50565b60006108d5610e04565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff161480156109235750825b9050600060018367ffffffffffffffff16148015610958575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015610966575080155b1561099d576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083156109ed5760018560000160086101000a81548160ff0219169083151502179055505b6109f5610e2c565b8315610a515760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d26001604051610a4891906114fb565b60405180910390a15b5050505050565b600080610a63610e36565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b60016020528060005260406000206000915090505481565b610ab0610d35565b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167ff93f9a76c1bf3444d22400a00cb9fe990e6abe9dbb333fda48859cfee864543d82604051610b4d91906110f5565b60405180910390a25050565b600080610b64610e5e565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b60003411610bd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcb90611562565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c2291906113dc565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167fc06e9f2d4dc93d7f30aeb5344ef386d5a8d4c62e8a6edfa1c51a6a15ac58765134604051610c6f9190611066565b60405180910390a2565b610c81610d35565b6000610c8b610e5e565b9050818160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff16610cef610a58565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a35050565b610d3d610dfc565b73ffffffffffffffffffffffffffffffffffffffff16610d5b610a58565b73ffffffffffffffffffffffffffffffffffffffff1614610dba57610d7e610dfc565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610db1919061111f565b60405180910390fd5b565b6000610dc6610e5e565b90508060000160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055610df882610e86565b5050565b600033905090565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b610e34610f5d565b565b60007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b60007f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00905090565b6000610e90610e36565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b610f65610f9d565b610f9b576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000610fa7610e04565b60000160089054906101000a900460ff16905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fed82610fc2565b9050919050565b610ffd81610fe2565b811461100857600080fd5b50565b60008135905061101a81610ff4565b92915050565b60006020828403121561103657611035610fbd565b5b60006110448482850161100b565b91505092915050565b6000819050919050565b6110608161104d565b82525050565b600060208201905061107b6000830184611057565b92915050565b61108a8161104d565b811461109557600080fd5b50565b6000813590506110a781611081565b92915050565b6000602082840312156110c3576110c2610fbd565b5b60006110d184828501611098565b91505092915050565b60008115159050919050565b6110ef816110da565b82525050565b600060208201905061110a60008301846110e6565b92915050565b61111981610fe2565b82525050565b60006020820190506111346000830184611110565b92915050565b611143816110da565b811461114e57600080fd5b50565b6000813590506111608161113a565b92915050565b6000806040838503121561117d5761117c610fbd565b5b600061118b8582860161100b565b925050602061119c85828601611151565b9150509250929050565b600082825260208201905092915050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b60006111ed6014836111a6565b91506111f8826111b7565b602082019050919050565b6000602082019050818103600083015261121c816111e0565b9050919050565b600081905092915050565b50565b600061123e600083611223565b91506112498261122e565b600082019050919050565b600061125f82611231565b9150819050919050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b600061129f600f836111a6565b91506112aa82611269565b602082019050919050565b600060208201905081810360008301526112ce81611292565b9050919050565b7f416c726561647920686176696e672073756666696369656e742066756e647300600082015250565b600061130b601f836111a6565b9150611316826112d5565b602082019050919050565b6000602082019050818103600083015261133a816112fe565b9050919050565b7f4e6f7420612077686974656c6973746564206163636f756e7400000000000000600082015250565b60006113776019836111a6565b915061138282611341565b602082019050919050565b600060208201905081810360008301526113a68161136a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006113e78261104d565b91506113f28361104d565b925082820190508082111561140a576114096113ad565b5b92915050565b7f57616974203820686f757273206265666f726520626f72726f77696e6720616760008201527f61696e0000000000000000000000000000000000000000000000000000000000602082015250565b600061146c6023836111a6565b915061147782611410565b604082019050919050565b6000602082019050818103600083015261149b8161145f565b9050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000819050919050565b60006114e56114e06114db846114a2565b6114c0565b6114ac565b9050919050565b6114f5816114ca565b82525050565b600060208201905061151060008301846114ec565b92915050565b7f496e636f72726563742045746865722073656e74000000000000000000000000600082015250565b600061154c6014836111a6565b915061155782611516565b602082019050919050565b6000602082019050818103600083015261157b8161153f565b905091905056fea26469706673582212200df698c7675c80efd877f28b71cb444b1d2220b3815e737f90b31ad17fb251e464736f6c63430008190033",
  "deployedBytecode": "0x6080604052600436106100e15760003560e01c80638129fc1c1161007f578063c01cd1c711610059578063c01cd1c7146102a3578063e30c3978146102cc578063f0d5b1d0146102f7578063f2fde38b14610301576100e8565b80638129fc1c146102245780638da5cb5b1461023b578063bf5d50c414610266576100e8565b806354789a5e116100bb57806354789a5e1461019057806367b4982c146101cd578063715018a6146101f657806379ba50971461020d576100e8565b806322e4a528146100ed57806328fd10d71461012a5780632e1a7d4d14610167576100e8565b366100e857005b600080fd5b3480156100f957600080fd5b50610114600480360381019061010f9190611020565b61032a565b6040516101219190611066565b60405180910390f35b34801561013657600080fd5b50610151600480360381019061014c9190611020565b610342565b60405161015e9190611066565b60405180910390f35b34801561017357600080fd5b5061018e600480360381019061018991906110ad565b61035a565b005b34801561019c57600080fd5b506101b760048036038101906101b29190611020565b6104a3565b6040516101c491906110f5565b60405180910390f35b3480156101d957600080fd5b506101f460048036038101906101ef9190611020565b6104c3565b005b34801561020257600080fd5b5061020b610828565b005b34801561021957600080fd5b5061022261083c565b005b34801561023057600080fd5b506102396108cb565b005b34801561024757600080fd5b50610250610a58565b60405161025d919061111f565b60405180910390f35b34801561027257600080fd5b5061028d60048036038101906102889190611020565b610a90565b60405161029a9190611066565b60405180910390f35b3480156102af57600080fd5b506102ca60048036038101906102c59190611166565b610aa8565b005b3480156102d857600080fd5b506102e1610b59565b6040516102ee919061111f565b60405180910390f35b6102ff610b91565b005b34801561030d57600080fd5b5061032860048036038101906103239190611020565b610c79565b005b60036020528060005260406000206000915090505481565b60006020528060005260406000206000915090505481565b610362610d35565b804710156103a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039c90611203565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff16826040516103cb90611254565b60006040518083038185875af1925050503d8060008114610408576040519150601f19603f3d011682016040523d82523d6000602084013e61040d565b606091505b5050905080610451576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610448906112b5565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5836040516104979190611066565b60405180910390a25050565b60026020528060005260406000206000915054906101000a900460ff1681565b60006702c68af0bb14000090506706f05b59d3b200008273ffffffffffffffffffffffffffffffffffffffff163110610531576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052890611321565b60405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166105bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b49061138d565b60405180910390fd5b80471015610600576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f790611203565b60405180910390fd5b617080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461064d91906113dc565b42101561068f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068690611482565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16826040516106b590611254565b60006040518083038185875af1925050503d80600081146106f2576040519150601f19603f3d011682016040523d82523d6000602084013e6106f7565b606091505b505090508061073b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610732906112b5565b60405180910390fd5b81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461078a91906113dc565b9250508190555042600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167fac59582e5396aca512fa873a2047e7f4c80f8f55d4a06cb34a78a0187f62719f8360405161081b9190611066565b60405180910390a2505050565b610830610d35565b61083a6000610dbc565b565b6000610846610dfc565b90508073ffffffffffffffffffffffffffffffffffffffff16610867610b59565b73ffffffffffffffffffffffffffffffffffffffff16146108bf57806040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016108b6919061111f565b60405180910390fd5b6108c881610dbc565b50565b60006108d5610e04565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff161480156109235750825b9050600060018367ffffffffffffffff16148015610958575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015610966575080155b1561099d576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083156109ed5760018560000160086101000a81548160ff0219169083151502179055505b6109f5610e2c565b8315610a515760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d26001604051610a4891906114fb565b60405180910390a15b5050505050565b600080610a63610e36565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b60016020528060005260406000206000915090505481565b610ab0610d35565b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167ff93f9a76c1bf3444d22400a00cb9fe990e6abe9dbb333fda48859cfee864543d82604051610b4d91906110f5565b60405180910390a25050565b600080610b64610e5e565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b60003411610bd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcb90611562565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c2291906113dc565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167fc06e9f2d4dc93d7f30aeb5344ef386d5a8d4c62e8a6edfa1c51a6a15ac58765134604051610c6f9190611066565b60405180910390a2565b610c81610d35565b6000610c8b610e5e565b9050818160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff16610cef610a58565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a35050565b610d3d610dfc565b73ffffffffffffffffffffffffffffffffffffffff16610d5b610a58565b73ffffffffffffffffffffffffffffffffffffffff1614610dba57610d7e610dfc565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610db1919061111f565b60405180910390fd5b565b6000610dc6610e5e565b90508060000160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055610df882610e86565b5050565b600033905090565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b610e34610f5d565b565b60007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b60007f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00905090565b6000610e90610e36565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b610f65610f9d565b610f9b576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000610fa7610e04565b60000160089054906101000a900460ff16905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fed82610fc2565b9050919050565b610ffd81610fe2565b811461100857600080fd5b50565b60008135905061101a81610ff4565b92915050565b60006020828403121561103657611035610fbd565b5b60006110448482850161100b565b91505092915050565b6000819050919050565b6110608161104d565b82525050565b600060208201905061107b6000830184611057565b92915050565b61108a8161104d565b811461109557600080fd5b50565b6000813590506110a781611081565b92915050565b6000602082840312156110c3576110c2610fbd565b5b60006110d184828501611098565b91505092915050565b60008115159050919050565b6110ef816110da565b82525050565b600060208201905061110a60008301846110e6565b92915050565b61111981610fe2565b82525050565b60006020820190506111346000830184611110565b92915050565b611143816110da565b811461114e57600080fd5b50565b6000813590506111608161113a565b92915050565b6000806040838503121561117d5761117c610fbd565b5b600061118b8582860161100b565b925050602061119c85828601611151565b9150509250929050565b600082825260208201905092915050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b60006111ed6014836111a6565b91506111f8826111b7565b602082019050919050565b6000602082019050818103600083015261121c816111e0565b9050919050565b600081905092915050565b50565b600061123e600083611223565b91506112498261122e565b600082019050919050565b600061125f82611231565b9150819050919050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b600061129f600f836111a6565b91506112aa82611269565b602082019050919050565b600060208201905081810360008301526112ce81611292565b9050919050565b7f416c726561647920686176696e672073756666696369656e742066756e647300600082015250565b600061130b601f836111a6565b9150611316826112d5565b602082019050919050565b6000602082019050818103600083015261133a816112fe565b9050919050565b7f4e6f7420612077686974656c6973746564206163636f756e7400000000000000600082015250565b60006113776019836111a6565b915061138282611341565b602082019050919050565b600060208201905081810360008301526113a68161136a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006113e78261104d565b91506113f28361104d565b925082820190508082111561140a576114096113ad565b5b92915050565b7f57616974203820686f757273206265666f726520626f72726f77696e6720616760008201527f61696e0000000000000000000000000000000000000000000000000000000000602082015250565b600061146c6023836111a6565b915061147782611410565b604082019050919050565b6000602082019050818103600083015261149b8161145f565b9050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000819050919050565b60006114e56114e06114db846114a2565b6114c0565b6114ac565b9050919050565b6114f5816114ca565b82525050565b600060208201905061151060008301846114ec565b92915050565b7f496e636f72726563742045746865722073656e74000000000000000000000000600082015250565b600061154c6014836111a6565b915061155782611516565b602082019050919050565b6000602082019050818103600083015261157b8161153f565b905091905056fea26469706673582212200df698c7675c80efd877f28b71cb444b1d2220b3815e737f90b31ad17fb251e464736f6c63430008190033",
  "devdoc": {
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner. Setting `newOwner` to the zero address is allowed; this can be used to cancel an initiated ownership transfer."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "borrowFaucet(address)": {
        "notice": "Allows whitelisted users to borrow Ether from the contract"
      },
      "initialize()": {
        "notice": "Initializer function (replaces constructor)"
      },
      "lendFaucet()": {
        "notice": "Allows lenders to deposit Ether into the treasury"
      },
      "updateWhitelistedAccount(address,bool)": {
        "notice": "Updates the whitelist status of an account"
      },
      "withdraw(uint256)": {
        "notice": "Allows the owner to withdraw Ether from the treasury"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 645,
        "contract": "contracts/SyvoraTreasury.sol:SyvoraTreasury",
        "label": "lenders",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 649,
        "contract": "contracts/SyvoraTreasury.sol:SyvoraTreasury",
        "label": "borrowers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 653,
        "contract": "contracts/SyvoraTreasury.sol:SyvoraTreasury",
        "label": "isWhitelistedAccount",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 657,
        "contract": "contracts/SyvoraTreasury.sol:SyvoraTreasury",
        "label": "lastBorrowedTimestamp",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}